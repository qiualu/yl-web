"""
Django settings for djdemo project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR代表了项目一个参考根路径，是当前文件的父级的父级目录路径，主要作用是提供给整个django项目进行路径拼接的。
BASE_DIR = Path(__file__).resolve().parent.parent

# 项目中一般我们会使用大写的变量来表示一个常量，所谓常量就是在开发中，用于表示一些固定数据的标记符，这种标记符，在其他语言中是基本语法来的，但是在python中并没有常量，
# 所以，就有了一些开发者声明一些大写的变量用于充当常量，常量一经定义，不能赋值。
# 因此，我们作为开发人员，就要遵守这种约定，以后如果希望项目中的一些数据不要被人修改，则可以声明成常量。
# django中的配置被强制要求一定要大写！！！否则django不识别

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# 秘钥，      用于提供给加密算法的秘钥
# 加密：      哈希串/序列串 = 加密算法(原始密码, 秘钥)
# 验证：      新哈希串 = 加密算法(原始密码, 秘钥)， 新哈希串==哈希串，则表示原始密码正确
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5muhcawu4^po@&w%3gckqkd80ad%t!(myg=!8j)(q@$%ttpa#3'

# SECURITY WARNING: don't run with debug turned on in production!
# 在线下开发，DEBUG = True，django会基于测试服务器提供静态资源（图片，css，js）的访问，当服务端出错，会显示详尽错误信息
# 在线上运营，DEBUG = False，django不会基于测试服务器提供静态资源访问，当服务端出错，不会显示任何关于系统的错误信息，仅仅提供错误页面
DEBUG = True

#设置当前django项目允许客户端通过哪些地址访问到django项目，"*"表示服务端的任意地址
ALLOWED_HOSTS = ["*"]
# ALLOWED_HOSTS = ['']


# Application definition
# django注册的子应用列表[用于数据库操作，缓存，日志，admin管理]
INSTALLED_APPS = [
    'django.contrib.admin',  # admin站点的子应用
    'django.contrib.auth',   # django内置的登录认证功能
    'django.contrib.contenttypes',  # 内容类型管理
    'django.contrib.sessions',      # session功能
    'django.contrib.messages',      # 信号、消息功能的实现
    'django.contrib.staticfiles',   # 静态文件浏览服务

    'home', # request 基础
    'mycookie', # cookie 相关
    'sess', # session 相关
    'user', # 路由进阶的学习 子应用的字符串导包路径
    'tem',  #  模板 开发者创建的子应用，这填写就是子应用的导包路径

]

# 中间件、全局钩子、拦截器
# 中间件，MIDDLEWARE，就是一个django提供给开发者用于在http请求和响应过程中，进行数据拦截的插件系统/钩子系统
# 用于进行拦截请求，或者数据格式转换，权限判断

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# django项目的默认总路由模块
ROOT_URLCONF = 'djdemo.urls'


# 模板
# Django框架中内置了web开发领域非常出名的一个DjangoTemplate模板引擎（简称：DTL）。
# DTL官方文档: https://docs.djangoproject.com/zh-hans/4.2/topics/templates/
# 要在django框架中使用模板引擎把视图中的数据更好的展示给客户端，需要完成3个步骤：
# 在项目配置文件settings.py中指定保存模板文件的模板目录。
# 一般模板目录都是设置在项目根目录或者主应用目录下。
# 在视图中基于django提供的渲染函数绑定模板文件和需要展示的数据变量
# 在模板目录下创建对应的模板文件，并根据模板引擎内置的模板语法，填写输出视图传递过来的数据。

# html模板引擎配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ # 配置HTML模板文件的存储目录[目录是手动创建，如果目录不存在，则会报错]
            BASE_DIR / "templates", # 两种都可以
            # "templates", 
        ], # 模板引擎目录
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# web应用程序的模块
WSGI_APPLICATION = 'djdemo.wsgi.application'


# Database
# https://docs.djangoproject.com/zh-hans/4.2/ref/settings/#databases
# 数据库配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
# 密码验证类
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# 语言代码
LANGUAGE_CODE = 'zh-hans'
# 时区
TIME_ZONE = "Asia/Shanghai"
# 是否启用国际化
USE_I18N = True
# 是否使用时区
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# 静态文件的访问url路径
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
# 默认情况下，django中的数据表的主键ID的数据类型 bigint
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'






# 配置项
# session核心类 
# session存储引擎核心类
SESSION_ENGINE = "django.contrib.sessions.backends.file"
# 保存到文件: django.contrib.sessions.backends.file
# 保存到数据库: django.contrib.sessions.backends.db    # 需要配置数据库连接
# 保存到缓存中: django.contrib.sessions.backends.cache # 需要配置缓存连接

# session存储目录[如果不设置,则默认是系统的缓存目录]
# 3.0以前的django 通过以下代码配置
# SESSION_FILE_PATH = os.path.join(BASE_DIR, "session")
# 3.0以后通过以下配置
SESSION_FILE_PATH = BASE_DIR / "sess/data"   # 路径拼接，如果当前目录不存在，必须手动创建，否则报错






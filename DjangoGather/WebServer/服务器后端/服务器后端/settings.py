"""
Django settings for 服务器后端 project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os, sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+q9u*t%^v(p=v#4xzobyuk%%u6zai1^@pghivo98%6gq49i)cm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

# 将应用所在的上层目录加入 Python 路径
sys.path.append(os.path.join(BASE_DIR, '纯数据应用'))

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # '纯数据应用.全运会计数项目.apps.全运会计数项目Config',
    '全运会计数项目',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '服务器后端.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '服务器后端.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




# ----- 日志设置 -----

# 从自定义模块导入中文日志格式化器（修正路径，确保和你的文件名完全一致）
from .路由日志编码 import UnicodeURL日志格式化器  # 关键：去掉多余的"由"字

# 创建日志文件夹路径
日志文件夹 = os.path.join(BASE_DIR, '公共文件/日志文件')
if not os.path.exists(日志文件夹):
    os.makedirs(日志文件夹)
日志文件 = os.path.join(日志文件夹, 'django.log')

# Django 日志配置（基于你原来的可用配置修改，仅调整日志级别）
日志配置 = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        '详细格式': {
            '()': UnicodeURL日志格式化器,
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        '简单格式': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
        '中文URL格式': {
            '()': UnicodeURL日志格式化器,
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },
    'filters': {
        '调试模式启用': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        '调试模式禁用': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'handlers': {
        '控制台': {
            # 核心修改：将级别从DEBUG提高到INFO，过滤冗余调试日志
            'level': 'INFO',  
            'filters': ['调试模式启用'],
            'class': 'logging.StreamHandler',
            'formatter': '中文URL格式'
        },
        '文件': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 日志文件,
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': '详细格式',
            'encoding': 'utf-8',
        }
    },
    'loggers': {
        # 只输出框架内部调试日志，只保留关键日志器
        'django.server': {  # 只处理HTTP请求日志（包含URL）
            'handlers': ['控制台', '文件'],
            'level': 'INFO',
            'propagate': False  # 避免日志冒泡导致重复输出
        },
        # 保留你的应用日志器
        '全运会计数项目': {  # 替换为你的实际应用名
            'handlers': ['控制台', '文件'],
            'level': 'INFO',
            'propagate': False
        }
    }
}

LOGGING = 日志配置


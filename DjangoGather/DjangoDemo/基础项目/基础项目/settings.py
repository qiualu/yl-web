"""
Django settings for 基础项目 project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-tvs@+_ke#@j2@1w_^)2#v363q7&infz4_tsk=e&nx(u1of-lo!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",          # Django 管理界面
    "django.contrib.auth",           # 认证系统
    "django.contrib.contenttypes",   # 内容类型框架，用于权限和内容类型的支持
    "django.contrib.sessions",       # 会话框架
    "django.contrib.messages",       # 消息框架，用于存储和检索用户消息
    "django.contrib.staticfiles",    # 管理静态文件的查找和服务的框架
    "投票应用.apps.投票应用Config",
    "路由功能.apps.路由功能Config",
    "模型功能.apps.模型功能Config",
    "视图功能.apps.视图功能Config",  # django-admin startapp 视图功能
    "表单视图.apps.表单视图Config",  # 表单视图 django-admin startapp 测试功能
    "测试功能.apps.测试功能Config",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "基础项目.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ['网页文件/模版文件'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "基础项目.wsgi.application"


# Database # 模型功能
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

# LANGUAGE_CODE = "en-us"
#
# TIME_ZONE = "UTC"
#
# USE_I18N = True
#
# USE_TZ = True
# 语言代码
LANGUAGE_CODE = 'zh-hans'
# 时区
TIME_ZONE = "Asia/Shanghai"
# 是否启用国际化
USE_I18N = True
# 是否使用时区
USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/



# STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]
STATIC_URL = '/网页文件/静态文件/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '网页文件/静态文件'),
]


# 设置上传的文件根目录 我们上面模型中设置的 upload_to="playbooks/%Y/%m/%d/"，那么上传的文件就会是在 BASE_DIR/'media'/'playbooks'/%Y/%m/%d/ 目录中
MEDIA_ROOT = BASE_DIR/'网页文件/media'

SPECTACULAR_SETTINGS = {
    # 设置这个参数，上传的文件就会是在项目目录下，而不是用户的家目录下
    'COMPONENT_SPLIT_REQUEST': True,
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ----- 日志设置 -----

from .log_utils import UnicodeURLFormatter
# 创建日志文件夹路径
LOG_DIR = os.path.join(BASE_DIR, '基础项目/日志')
# 确保日志文件夹存在，如果不存在则创建
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)
# 设置日志文件路径
LOG_FILE = os.path.join(LOG_DIR, 'django.log')
# Django 日志配置
# 日志配置
LOGGING = {
    'version': 1,  #使用的python内置的logging模块，那么python可能会对它进行升级，所以需要写一个版本号，目前就是1版本
    'disable_existing_loggers': False, #是否去掉目前项目中其他地方中以及使用的日志功能，但是将来我们可能会引入第三方的模块，里面可能内置了日志功能，所以尽量不要关闭。
    'formatters': { #日志记录格式
        'verbose': { #levelname等级，asctime记录时间，module表示日志发生的文件名称，lineno行号，message错误信息
            '()': UnicodeURLFormatter,  # 指定自定义的格式化器类路径 处理后在添加到日志中
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
        'unicode_url_formatter': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'custom_formatter': {
            '()': UnicodeURLFormatter,  # 指定自定义的格式化器类路径
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'filters': { #过滤器：可以对日志进行输出时的过滤用的
        'require_debug_true': { #在debug=True下产生的一些日志信息，要不要记录日志，需要的话就在handlers中加上这个过滤器，不需要就不加
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': { #和上面相反
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': { #日志处理方式，日志实例,向哪里输出
        'console': { #在控制台输出时的实例
            'level': 'DEBUG', #日志等级；debug是最低等级，那么只要比它高等级的信息都会被记录
            'filters': ['require_debug_true'], #在debug=True下才会打印在控制台
            'class': 'logging.StreamHandler', #使用的python的logging模块中的StreamHandler来进行输出
            # 'formatter': 'simple'
            # 'formatter': 'unicode_url_formatter'
            'formatter': 'custom_formatter'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置,日志文件名,日志保存目录必须手动创建
            'filename': LOG_FILE, #文件应该有读写权限。
            # 日志文件的最大值,这里我们设置300M
            'maxBytes': 300 * 1024 * 1024,  # B
            # 日志文件的数量,设置最大日志数量为10
            'backupCount': 10,
            # 日志格式:详细格式
            'formatter': 'verbose',
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
    },
    # 日志对象
    'loggers': {
        'django': {  #和django结合起来使用，将django中之前的日志输出内容的时候，按照我们的日志配置进行输出，
            # 'handlers': ['console', 'file'], #将来项目上线，把console去掉
            'handlers': ['console'], #将来项目上线，把console去掉  # 没有file 不写入文件
            'propagate': True, #冒泡：是否将日志信息记录冒泡给其他的日志处理系统，工作中都是True，不然django这个日志系统捕获到日志信息之后，其他模块中可能也有日志记录功能的模块，就获取不到这个日志信息了
        },
    }
}
# //http://127.0.0.1:8000/投票应用/



















